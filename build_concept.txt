Most of the windows consist of two separate layers: Game and UI.

Any input is then resolved first in the UI, if not handled, it's resolved in Game.
For decoupling purposes all parts of the game should at some point poll new events after resolving their input and/or updating. Almost no direct calls should exist between classes that needn't be
inherently coupled.

In SEUI I used Sint32 as return_code, which gets sent in an event along with pointers to some needed data. Should suffice. I'll have to rewrite... everything so it would work. 
The code's already gettting too coupled and incoherent.

Perhaps a stand-alone EventManager would be useful to simulate a listener-dispatcher web mostly for general-purpose events (eg. deleting map, where tiles, units and items get all deleted), etc.

MainLoop:
		while not quit:
			for event in events
				UI -> resolve event;
				if event not handled then
					Game -> resolve event;

			/// at this point all events should be handled
			/// any unhandled events should be treated separately during debugging

			UI -> update all
			Game -> update all

			UI -> render all
			Game -> render all

			/// fairly straight-forward, wouldn't you say? I thought so too


UIHolder:
			/// holds all UI components

	UnitInfoBlock
			/// shows info about currently selected (or hovered over) unit (HP,AP,SP,Portrait...)

	UnitActionBlock
			/// contains buttons with all available actions for active unit

GameHolder:
			/// currently BoxTileMap... dumb I know

	Units
			/// vector of all units, updated and rendered sequentially

	Items
			/// analogically

	TileMap
			/// should (and so far pretty much does) work independently of other components, shouldn't be painful even to revert back to hex grid somewhere in the future.